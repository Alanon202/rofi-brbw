#!/usr/bin/env bash
# Rofi frontend for Bitwarden (rbw) <https://github.com/doy/rbw>
#------------------------------------------------------------------------------
# @author:  Yusuf Aktepe <yusuf@yusufaktepe.com>
# @url:     https://github.com/yusufaktepe/rofi-brbw
# @license: GPL-3.0
#------------------------------------------------------------------------------
# Dependencies:
#   rofi, rbw, xdotool, xclip, sed, awk, coreutils, xdg-utils, nerd font
# TODO:
#   - Error handling/notifications
#------------------------------------------------------------------------------

# Key bindings
Kb_TypeUsername='Alt+u'
Kb_TypePassword='Alt+p'
Kb_TypeOTP='Alt+o'
Kb_OpenURL='Alt+l'
Kb_CopyUsername='Alt+U'
Kb_CopyPassword='Alt+P'
Kb_CopyOTP='Alt+O'
Kb_CopyURL='Alt+L'
Kb_QR='Alt+q'
Kb_Generate='Alt+g'
Kb_Add='Alt+n'
Kb_Edit='Alt+e'
Kb_Remove='Alt+d'
Kb_View='Alt+v'
Kb_History='Alt+h'
Kb_ClearLastUsed='Alt+C'
Kb_Sync='Alt+s'
Kb_Help='F1'

EmptyUserPlaceholder=-

Clipboard=both
QRImageViewer=xdg-open

# Type Options
TypeKeyDelay=0
TypeSleep=.2

# Prompt/Appearance
Prompt=' Bitwarden'
PromptSelectFolder=' Select folder'
PrefixUser=' '
Icon=unlock
IconLastUsed=recently_used

# Last used file location & max item size
LastUsedFile=~/.cache/rofi-brbw.cache
LastUsedMax=4

# Generate Options
PasswordLength=21
PasswordNoSymbols=true

# Editor to use when the script is not started from terminal
# shellcheck disable=SC2153
Editor="$TERMINAL -e nvim --noplugin -ni NONE"
[ -t 2 ] || export VISUAL=$Editor

_rofi() {
	rofi -dmenu -i -l 10 "$@"
}

ConfigFile=${XDG_CONFIG_HOME:-$HOME/.config}/rofi-brbw.conf
# shellcheck disable=SC1090
[ -f "$ConfigFile" ] && source "$ConfigFile"

Script=${0##*/}

# Unlock database
rbw unlocked 2>/dev/null || rbw unlock || exit 1

menu_help() {
	Selected=$(_rofi -p "$Prompt: Help" \
		-mesg "Hint: All hotkeys are configurable in config file" <<-EOF
			⮜ Return
			Type Username                       ⮞ $Kb_TypeUsername
			Type Password                       ⮞ $Kb_TypePassword
			Type OTP                            ⮞ $Kb_TypeOTP
			Open URL                            ⮞ $Kb_OpenURL
			Type Username<tab>Password          ⮞ Return
			Copy Username                       ⮞ $Kb_CopyUsername
			Copy Password                       ⮞ $Kb_CopyPassword
			Copy OTP                            ⮞ $Kb_CopyOTP
			Copy URL                            ⮞ $Kb_CopyURL
			Generate and display QR code        ⮞ $Kb_QR
			Generate and copy a new password    ⮞ $Kb_Generate
			Add a new password to the database  ⮞ $Kb_Add
			Modify password                     ⮞ $Kb_Edit
			Remove with confirmation            ⮞ $Kb_Remove
			View entry                          ⮞ $Kb_View
			View the password history           ⮞ $Kb_History
			Clear last used items               ⮞ $Kb_ClearLastUsed
			Sync Bitwarden database             ⮞ $Kb_Sync
		EOF
	)
	[ "$Selected" = '⮜ Return' ] && exec $0 || exit
}

clip() {
	case $Clipboard in
		both) xclip -r; xclip -o | xclip -selection clipboard ;;
		p*|c*) xclip -r -selection "$Clipboard" ;;
	esac
}

parse_vault() {
	[ -f "$LastUsedFile" ] || touch "$LastUsedFile"

	mapfile -t Entries < <( {
			tac $LastUsedFile
			rbw list --fields=folder,name,id,user | sed 's|^\t|.&|' | sort
		} | awk '!x[$0]++') # uniq

	i=0
	while IFS=$'\t' read -r F N I U; do
		Folder[i]=$F
		Name[i]=$N
		ID[i]=$I
		User[i]=${U:-$EmptyUserPlaceholder}
		FolderAndName[i]="$F/$N" # Used to calculate ColumnLength
		((i++))
	done < <(printf '%s\n' "${Entries[@]}")
}

rbw_gen() {
	${PasswordNoSymbols:-false} && GenOpts+=(--no-symbols)
	rbw generate "${GenOpts[@]}" $PasswordLength | clip
	notify-send -a system -i bitwarden "$Script" "Password copied to clipboard."
}

rbw_add() {
	coproc rbw_gen

	SelectedFolder=$(printf '%s\n' "${Folder[@]}" | sort -u | _rofi -p "$PromptSelectFolder")
	[ -n "$SelectedFolder" ] && AddOpts+=(--folder "$SelectedFolder") || exit

	TmpFile=$(mktemp "/tmp/$Script.XXXX")
	printf '%s \n%s \n%s' "Passname:" "Username:" "URI: https://" > "$TmpFile"
	if [ -t 2 ]; then
		${EDITOR:-$Editor} "$TmpFile"
	else
		$Editor "$TmpFile" >/dev/null 2>&1
	fi

	mapfile -t NewItem <<< "$(< "$TmpFile")"
	IFS=': ' read -r _ ItemName <<< "${NewItem[0]}"
	IFS=': ' read -r _ ItemUser <<< "${NewItem[1]}"
	IFS=': ' read -r _ ItemURI <<< "${NewItem[2]}"

	rm -f "$TmpFile"
	[ -z "$ItemName" ] && exit

	rbw add "${AddOpts[@]}" --uri "$ItemURI" "$ItemName" -- "$ItemUser"
}

rbw_rm() {
	Confirm=$(printf 'No\nYes' | _rofi -no-custom -p "Remove '$SelFolder/$SelName'?" -u 1)
	[ "$Confirm" = Yes ] && {
		rbw remove "$SelID"
		sed -i "\|^$LastUsed$|d" $LastUsedFile
	}
}

rbw_get() {
	[ "$1" = history ] && { local Cmd=history; shift ;}
	Selected=$(
		_rofi -p "$SelFolder/$SelName" -mesg "Enter: Copy field to clipboard" <<-EOF
			⮜ Return
			$(rbw ${Cmd:-get --full} "$1")
		EOF
	)
	case "$Selected" in
		'⮜ Return') exec $0 ;;
		'') exit ;;
		*) printf '%s' "${Selected##*: }" | clip ;;
	esac
}

qr_code() {
	TmpQR=$(mktemp --suffix=.png "/tmp/${Script}_qr.XXXX")
	rbw get "$1" | qrencode -s 6 -d 300 -v 8 -l H -o "$TmpQR"

	$QRImageViewer "$TmpQR" >/dev/null 2>&1 && rm -f "$TmpQR"
}

autotype() {
	[ -z "$1" ] || [ "$1" = $EmptyUserPlaceholder ] && exit

	XRepeatStatus=$(xset q | awk '/auto repeat:/ {print $3; exit}')
	xset r off

	xdotool type --delay $TypeKeyDelay --clearmodifiers -- "$1"
	[ -n "$2" ] && {
		xdotool key Tab
		xdotool type --delay $TypeKeyDelay --clearmodifiers -- "$2"
	}
	${Enter:-false} && xdotool key Return
	${CopyOTP:-false} && OTP=$(rbw code "$SelID" 2>/dev/null) && clip <<< "$OTP"

	xset r "$XRepeatStatus"
}

cache() {
	# shellcheck disable=SC2016
	[ "$LastUsedItems" -ge $LastUsedMax ] && sed -i -e :a -e '$q;N;'$LastUsedMax',$D;ba' $LastUsedFile
	sed -i "\|^$LastUsed$|d" $LastUsedFile
	printf '%s\n' "$LastUsed" >> $LastUsedFile
}

menu() {
	parse_vault
	ColumnLength=$(printf '%s\n' "${FolderAndName[@]}" | wc -L)
	read -r LastUsedItems _ <<< "$(wc -l $LastUsedFile)"
	local _Icon=$Icon

	Pass=$(
		for ((i=0; i<${#ID[@]}; i++)); {
			[ $i -lt "$LastUsedItems" ] && Icon=$IconLastUsed || Icon=$_Icon
			printf '%*s\t%b\n' "-${ColumnLength}" \
				"${FolderAndName[i]}" \
				"${PrefixUser}${User[i]}\0icon\x1f$Icon"
		} | _rofi -format 'i:s' -p "$Prompt" \
				-kb-custom-1 "$Kb_Help" \
				-kb-custom-2 "$Kb_Edit" \
				-kb-custom-3 "$Kb_Remove" \
				-kb-custom-4 "$Kb_Generate" \
				-kb-custom-5 "$Kb_Sync" \
				-kb-custom-6 "$Kb_Add" \
				-kb-custom-7 "$Kb_ClearLastUsed" \
				-kb-custom-8 "$Kb_View" \
				-kb-custom-9 "$Kb_History" \
				-kb-custom-10 "$Kb_QR" \
				-kb-custom-11 "$Kb_CopyUsername" \
				-kb-custom-12 "$Kb_CopyPassword" \
				-kb-custom-13 "$Kb_CopyOTP" \
				-kb-custom-14 "$Kb_CopyURL" \
				-kb-custom-15 "$Kb_TypeUsername" \
				-kb-custom-16 "$Kb_TypePassword" \
				-kb-custom-17 "$Kb_TypeOTP" \
				-kb-custom-18 "$Kb_OpenURL"
	)
	Ret=$?
	Index=${Pass%%:*}
	[ -z "$Index" ] || [ "$Index" -eq -1 ] && exit

	SelFolder=${Folder[$Index]}
	SelName=${Name[$Index]}
	SelID=${ID[$Index]}
	SelUser=${User[$Index]}
	LastUsed=$(printf '%s\t%s\t%s\t%s\n' "$SelFolder" "$SelName" "$SelID" "$SelUser")

	case $Ret in
		10) menu_help ;;
		11) rbw edit "$SelID" ;;
		12) Cache=false; rbw_rm ;;
		13) Cache=false; rbw_gen ;;
		14) Cache=false; rbw sync; exec $0 ;;
		15) Cache=false; rbw_add ;;
		16) Cache=false; printf '' > $LastUsedFile ;;
		17) rbw_get "$SelID" ;;
		18) rbw_get history "$SelID" ;;
		19) qr_code "$SelID" ;;
		20) [ -n "${SelUser%"$EmptyUserPlaceholder"}" ] && clip <<< "$SelUser" ;;
		21) clip <<< "$(rbw get "$SelID")" ;;
		22) clip <<< "$(rbw code "$SelID" 2>/dev/null)" ;;
		23) clip <<< "$(rbw get --full "$SelID" | sed '/^URI: /!d;s/.*: //')" ;;
		24) sleep $TypeSleep; autotype "$SelUser" ;;
		25) sleep $TypeSleep; CopyOTP=true autotype "$(rbw get "$SelID")" ;;
		26) sleep $TypeSleep; Enter=true autotype "$(rbw code "$SelID" 2>/dev/null)" ;;
		27) setsid -f xdg-open "$(rbw get --full "$SelID" | sed '/^URI: /!d;s/.*: //')"  >/dev/null 2>&1 ;;
		0)  sleep $TypeSleep; CopyOTP=true autotype "$SelUser" "$(rbw get "$SelID")" ;;
		*)  exit $Ret ;;
	esac

	${Cache:-:} && cache
}

menu

